// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: server/dbpeerconnector/peergrpc/main.proto

package peergrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	SubscribeReplica(ctx context.Context, in *SubscribeReplicaRequest, opts ...grpc.CallOption) (PeerService_SubscribeReplicaClient, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) SubscribeReplica(ctx context.Context, in *SubscribeReplicaRequest, opts ...grpc.CallOption) (PeerService_SubscribeReplicaClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerService_ServiceDesc.Streams[0], "/PeerService/SubscribeReplica", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceSubscribeReplicaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerService_SubscribeReplicaClient interface {
	Recv() (*ReplicaUpdate, error)
	grpc.ClientStream
}

type peerServiceSubscribeReplicaClient struct {
	grpc.ClientStream
}

func (x *peerServiceSubscribeReplicaClient) Recv() (*ReplicaUpdate, error) {
	m := new(ReplicaUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	SubscribeReplica(*SubscribeReplicaRequest, PeerService_SubscribeReplicaServer) error
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) SubscribeReplica(*SubscribeReplicaRequest, PeerService_SubscribeReplicaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeReplica not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_SubscribeReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReplicaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServiceServer).SubscribeReplica(m, &peerServiceSubscribeReplicaServer{stream})
}

type PeerService_SubscribeReplicaServer interface {
	Send(*ReplicaUpdate) error
	grpc.ServerStream
}

type peerServiceSubscribeReplicaServer struct {
	grpc.ServerStream
}

func (x *peerServiceSubscribeReplicaServer) Send(m *ReplicaUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeReplica",
			Handler:       _PeerService_SubscribeReplica_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/dbpeerconnector/peergrpc/main.proto",
}
